import os
import sys
import PyPDF2
import openai
from langchain.chains import ConversationalRetrievalChain
from langchain.chat_models import ChatOpenAI
from langchain.document_loaders import TextLoader, PyPDFLoader
from langchain.embeddings import OpenAIEmbeddings
from langchain.indexes import VectorstoreIndexCreator
from langchain.vectorstores import Chroma

import constants

os.environ["OPENAI_API_KEY"] = constants.APIKEY

query = None
if len(sys.argv) > 1:
    query = sys.argv[1]

# Folder path that contains multiple files
folder_path = "C:/Users/Ankur Sharma/Desktop/datachatbot"

# Create a list to hold all the loaders
loaders = []

# Loop through all files in the folder and create loaders for each file
for filename in os.listdir(folder_path):
    file_path = os.path.join(folder_path, filename)

    # Check if the file is a PDF and create a PyPDFLoader for it
    if filename.endswith(".pdf"):
        pdf_loader = PyPDFLoader(file_path=file_path)
        loaders.append(pdf_loader)
    else:
        text_loader = TextLoader(file_path=file_path)
        loaders.append(text_loader)

# Create the index from all the loaders
index = VectorstoreIndexCreator().from_loaders(loaders)

chain = ConversationalRetrievalChain.from_llm(
    llm=ChatOpenAI(model="gpt-3.5-turbo"),
    retriever=index.vectorstore.as_retriever(search_kwargs={"k": 1}),
)

chat_history = []
while True:
    if not query:
        query = input("Prompt: ")
    if query in ['quit', 'q', 'exit']:
        sys.exit()

    try:
        result = chain({"question": query, "chat_history": chat_history})
        print(result['answer'])
    except IndexError as e:
        print(f"An error occurred: {e}")

    chat_history.append((query, result['answer']))
    query = None
